---
title: "Predicting Sale Price of Houses in Ames, IA with Linear Models"
author: "Kevin Sanford, Maile Kamada, and Harshaan Sall"
date: "12-13-2024"
format:
  html:
    toc: true
    toc-location: left
    embed-resources: true
    code-line-numbers: true
  pdf:
    code-line-numbers: true
editor: visual
---

## Introduction

We intend to use linear regression techniques to approach the exercise in the Kaggle competition found at [https://www.kaggle.com/competitions/house-prices-advanced-regression-techniques](https://www.kaggle.com/competitions/house-prices-advanced-regression-techniques/data). The exercise provides a large data sets that describes houses in Ames, Iowa with 79 parameters. The goal of the exercise is to create an algorithm that predicts the selling price of homes based on the parameters. The data provided consists of two data sets: test.csv and train.csv. The training data set includes housing prices to facilitate the creation of a linear regression model that predicts sale prices of homes, which can then be tested on the test data set. Before using the test data set, we will attempt to maximize the accuracy of the model by splitting the training data in half, using half of the data for training, then comparing the other half with the model's prediction. After tuning the model, we will retrain it on the full training data set and predict housing prices for the test data set.

## Data Analysis

### Import Data and Necessary Packages

```{r}
library(tidyverse)
```

```{r}
# check out data structure
housing_data.train <- read.csv("train.csv")
head(housing_data.train)
```

### View Summary of Data

Using `summary()` with our data, we can see specific characteristics of the fields with numeric values, such as LotArea and GrLivArea. We can see statistics which will help us tune our model by potentially removing outliers if needed.

```{r}
dim(housing_data.test)

summary(housing_data.train)
```

### Continuous Fields - Visualize Data with R Plots

To further view the continuous fields in our data, we plotted the values of those fields compared to the sale price. By plotting the data, we can better visualize any outliers. For example, in the plot for Lot Area, we can see that most of the values are less than 50000, so it is safe to assume that any houses above that area will probably affect our model negatively.

```{r}
# some numerical plots
plot(housing_data.train$YearBuilt,
     housing_data.train$SalePrice,
     xlab = "Year Built",
     ylab = "Sale Price")
plot(housing_data.train$LotArea,
     housing_data.train$SalePrice,
     xlab = "Lot Area",
     ylab = "Sale Price")
plot(housing_data.train$LotFrontage,
     housing_data.train$SalePrice,
     xlab = "Lot Frontage",
     ylab = "Sale Price")
plot(housing_data.train$GrLivArea,
     housing_data.train$SalePrice,
     xlab = "Living Area Square Feet",
     ylab = "Sale Price")
```

### Continuous Fields - Visualize Data with ggplot2

We can view the data with the median sale price, as well as the trend lines with standard error.

With `ggplot2()` we can take a closer look at the continuous fields.

```{r}
# some numerical plots using ggplot2
ggplot(housing_data.train,
        aes(x = YearBuilt,
            y = SalePrice/1000)
) + geom_point() +
  geom_hline(yintercept = median(housing_data.train$SalePrice/1000)) +
  geom_smooth(method = "lm", se = TRUE) +
  labs(y = "Sale Price ($1000's)",
       x = "Year Built",
       title = "Year Built vs. Sale Price")

ggplot(housing_data.train,
        aes(x = LotArea,
            y = SalePrice/1000)
) + geom_point() +
  geom_hline(yintercept = median(housing_data.train$SalePrice/1000)) +
  geom_smooth(method = "lm", se = TRUE) +
  labs(y = "Sale Price ($1000's)",
       x = "Lot Area",
       title = "Lot Area vs. Sale Price")

housing_data.train %>%
  filter(LotArea < 50000) %>%
  ggplot(aes(x = LotArea,
             y = SalePrice/1000)) +
  geom_point() +
  geom_hline(yintercept = median(housing_data.train$SalePrice/1000)) +
  geom_smooth(method = "lm", se = TRUE) +
  labs(y = "Sale Price ($1000's)",
       x = "Lot Area (Less than 50k)",
       title = "Lot Area Less Than 50k vs. Sale Price")

ggplot(housing_data.train,
        aes(x = LotFrontage,
            y = SalePrice/1000)
) + geom_point() +
  geom_hline(yintercept = median(housing_data.train$SalePrice/1000)) +
  geom_smooth(method = "lm", se = TRUE) +
  labs(y = "Sale Price ($1000's)",
       x = "Lot Frontage",
       title = "Lot Frontage vs. Sale Price")

ggplot(housing_data.train,
        aes(x = GrLivArea,
            y = SalePrice/1000)
) + geom_point() +
  geom_hline(yintercept = median(housing_data.train$SalePrice/1000)) +
  geom_smooth(method = "lm", se = TRUE) +
  labs(y = "Sale Price ($1000's)",
       x = "Living Area Square Feet",
       title = "Living Area Square Feet vs. Sale Price")
```

These plots show some positive correlation, suggesting that several factors are important for the cost of a home in Ames. Now we look at some categorical factors that may also affect the cost.

### Categorical Fields - Visualize Data with R Plots

We can also plot the data of categorical fields using `factor().` This function can be applied to categorical data to encode the character value and apply an integer to it for the count in the data. By plotting the factor, R creates a box plot to display the same values as the `summary()` did for the numeric fields.

```{r}
#explore categorical fields
plot(factor(housing_data.train$Neighborhood),
     housing_data.train$SalePrice,
     xlab = "Neighborhood",
     ylab = "Sale Price")
plot(factor(housing_data.train$Street),
     housing_data.train$SalePrice,
     xlab = "Type of Street",
     ylab = "Sale Price")
plot(factor(housing_data.train$Heating),
     housing_data.train$SalePrice,
     xlab = "Heating Type",
     ylab = "Sale Price")
plot(factor(housing_data.train$BldgType),
     housing_data.train$SalePrice,
     xlab = "Building Type",
     ylab = "Sale Price")
```

Now we use ggplot2 to to combine some of the numerical and categorical plots

### Categorical Fields - Visualize Data with ggplot2

```{r}
# combine plots of different variables with ggplot
# plot year built vs sale price with different neighbrhoods colored
ggplot(housing_data.train,
        aes(x = YearBuilt,
            y = SalePrice/1000,
            color = Neighborhood)
) + geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  labs(y = "Sale Price ($1000's)",
       x = "Year Built",
       title = "Year Built vs. Sale Price")

# plot year built vs sale price for each neighborhood
housing_data.train %>%
  ggplot(aes(x = YearBuilt,
             y = SalePrice/1000)) +
  geom_point() +
  facet_wrap(~Neighborhood) +
  geom_hline(yintercept = median(housing_data.train$SalePrice/1000)) +
  geom_smooth(method = "lm", se = TRUE) +
  labs(y = "Sale Price ($1000's)",
       x = "Year Built",
       title = "Year Built vs. Sale Price in Each Neighborhood")

# plot only 9 or less of the plots above for readability
housing_data.train %>%
  filter(Neighborhood != "IDOTRR") %>%
  filter(Neighborhood != "MeadowV") %>%
  filter(Neighborhood != "Mitchel") %>%
  filter(Neighborhood != "NAmes") %>%
  filter(Neighborhood != "NoRidge") %>%
  filter(Neighborhood != "NPkVill") %>%
  filter(Neighborhood != "NridgHt") %>%
  filter(Neighborhood != "NWAmes") %>%
  filter(Neighborhood != "OldTown") %>%
  filter(Neighborhood != "Sawyer") %>%
  filter(Neighborhood != "SawyerW") %>%
  filter(Neighborhood != "Somerst") %>%
  filter(Neighborhood != "StoneBr") %>%
  filter(Neighborhood != "SWISU") %>%
  filter(Neighborhood != "Timber") %>%
  filter(Neighborhood != "Veenker") %>%
  ggplot(aes(x = YearBuilt,
             y = SalePrice/1000)) +
  geom_point() +
  facet_wrap(~Neighborhood) +
  geom_hline(yintercept = median(housing_data.train$SalePrice/1000)) +
  geom_smooth(method = "lm", se = TRUE) +
  labs(y = "Sale Price ($1000's)",
       x = "Year Built",
       title = "Year Built vs. Sale Price in Each Neighborhood")

housing_data.train %>%
  filter(Neighborhood != "Blmngtn") %>%
  filter(Neighborhood != "Blueste") %>%
  filter(Neighborhood != "BrDale") %>%
  filter(Neighborhood != "BrkSide") %>%
  filter(Neighborhood != "ClearCr") %>%
  filter(Neighborhood != "CollgCr") %>%
  filter(Neighborhood != "Crawfor") %>%
  filter(Neighborhood != "Edwards") %>%
  filter(Neighborhood != "Gilbert") %>%
  filter(Neighborhood != "Sawyer") %>%
  filter(Neighborhood != "SawyerW") %>%
  filter(Neighborhood != "Somerst") %>%
  filter(Neighborhood != "StoneBr") %>%
  filter(Neighborhood != "SWISU") %>%
  filter(Neighborhood != "Timber") %>%
  filter(Neighborhood != "Veenker") %>%
  ggplot(aes(x = YearBuilt,
             y = SalePrice/1000)) +
  geom_point() +
  facet_wrap(~Neighborhood) +
  geom_hline(yintercept = median(housing_data.train$SalePrice/1000)) +
  geom_smooth(method = "lm", se = TRUE) +
  labs(y = "Sale Price ($1000's)",
       x = "Year Built",
       title = "Year Built vs. Sale Price in Each Neighborhood")

housing_data.train %>%
  filter(Neighborhood != "Blmngtn") %>%
  filter(Neighborhood != "Blueste") %>%
  filter(Neighborhood != "BrDale") %>%
  filter(Neighborhood != "BrkSide") %>%
  filter(Neighborhood != "ClearCr") %>%
  filter(Neighborhood != "CollgCr") %>%
  filter(Neighborhood != "Crawfor") %>%
  filter(Neighborhood != "Edwards") %>%
  filter(Neighborhood != "Gilbert") %>%
  filter(Neighborhood != "IDOTRR") %>%
  filter(Neighborhood != "MeadowV") %>%
  filter(Neighborhood != "Mitchel") %>%
  filter(Neighborhood != "NAmes") %>%
  filter(Neighborhood != "NoRidge") %>%
  filter(Neighborhood != "NPkVill") %>%
  filter(Neighborhood != "NridgHt") %>%
  filter(Neighborhood != "NWAmes") %>%
  filter(Neighborhood != "OldTown") %>%
  ggplot(aes(x = YearBuilt,
             y = SalePrice/1000)) +
  geom_point() +
  facet_wrap(~Neighborhood) +
  geom_hline(yintercept = median(housing_data.train$SalePrice/1000)) +
  geom_smooth(method = "lm", se = TRUE) +
  labs(y = "Sale Price ($1000's)",
       x = "Year Built",
       title = "Year Built vs. Sale Price in Each Neighborhood")

# plot year built vs sale price for each building type
housing_data.train %>%
  ggplot(aes(YearBuilt, SalePrice/1000, color = BldgType)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  labs(y = "Sale Price ($1000's)",
       x = "Year Built",
       title = "Year Built vs. Sale Price",
       color = "Building Type")

# plot building type vs sale price, separated by street type
ggplot(housing_data.train,
        aes(x = Street,
            y = SalePrice/1000,
            color = BldgType)
) + geom_boxplot() +
  geom_hline(yintercept = median(housing_data.train$SalePrice/1000)) +
  labs(y = "Sale Price ($1000's)",
       x = "Street Type",
       title = "Building Type vs. Sale Price",
       color = "Building Type")
```

Some of the data from the plots are not insightful. We can see that the home prices in certain neighborhoods have changed over time and some have not. Some neighborhoods have very few data points, illustrating the fact that no one variable can be relied upon too heavily when predicting housing prices.

## Prepare Data for the Model

First, we split the training data and use half of it to train a linear regression model. When the model is trained, we can test its accuracy with the other half. Since the test data did not provide the sale price, we instead will use the second half of the training data as our "test".

```{r}
# split the train data set in half
housing_data.train.1 <- housing_data.train[1:730,]
housing_data.train.2 <- housing_data.train[731:1460,]
head(housing_data.train.1)
head(housing_data.train.2)
```

### Ensure Normal Distribution

Now we check that the sale price has normal distribution, ensuring that we meet the assumptions to use the linear model. We do this by viewing Q-Q plot, with `qqnorm()` and `qqline()`. If the data follows a linear pattern with the qq line, then it has a normal distribution. If not, then we need to transform the data to ensure normal distribution.

```{r}
#view Q-Q plot to check if Sale Price has a normal distribution
qqnorm(housing_data.train.1$SalePrice)
qqline(housing_data.train.1$SalePrice)
```

Since the data does not follow normal distribution, we can apply the log function transform the data. This follows the same technique as the paper we are references for this project.

```{r}
#apply log to the sale price like in the source paper to ensure normal dist
qqnorm(log(housing_data.train.1$SalePrice))
qqline(log(housing_data.train.1$SalePrice))
```

### Tests for Significant Variables

Now that we know our data has a normal distribution, we can apply hypothesis testing such as `t.test()` and correlation `cor().`

#### T Tests

As shown in lecture, we can view which variables are significant using a t test `t.test()`. In the output, if the p-value is low, then we can assume that the variable has statistical significance. Below, we use the Neighborhood field as an example. We can see which neighborhood will be more significant in our model.

```{r}
# check to make sure certain variables are significant
t.test (log(housing_data.train.1$SalePrice[housing_data.train.1$Neighborhood == 'NAmes']))
t.test (log(housing_data.train.1$SalePrice[housing_data.train.1$Neighborhood == 'CollgCr']))
t.test (log(housing_data.train.1$SalePrice[housing_data.train.1$Neighborhood == 'OldTown']))
t.test (log(housing_data.train.1$SalePrice[housing_data.train.1$Neighborhood == 'Edwards']))
t.test (log(housing_data.train.1$SalePrice[housing_data.train.1$Neighborhood == 'NoRidge']))
t.test (log(housing_data.train.1$SalePrice[housing_data.train.1$Neighborhood == 'NridgHt']))
t.test (log(housing_data.train.1$SalePrice[housing_data.train.1$Neighborhood == 'Somerst']))
t.test (log(housing_data.train.1$SalePrice[housing_data.train.1$Neighborhood == 'StoneBr']))
```

We also apply the `t.test()` on the Lot Area field also removing the outliers of any houses over 50,000 sq ft.

```{r}
t.test (log(housing_data.train.1$SalePrice))
t.test (log(housing_data.train.1$SalePrice[housing_data.train.1$LotArea < 50000]))
t.test (log(housing_data.train.1$SalePrice[housing_data.train.1$GrLivArea]))
```

#### Correlation

Another way to measure significance is to use correlation `cor()`. We apply the correlation function on various fields in our data. The higher the correlation, the stronger the relationship is between the variable and the sale price.

```{r}
print("Correlation between sale price and lot area:")
cor(log(housing_data.train.1$SalePrice),
    housing_data.train.1$LotArea)

print("Correlation between sale price and lot area < 50k:")
cor(log(housing_data.train.1$SalePrice[housing_data.train.1$LotArea < 50000]),
    housing_data.train.1$LotArea[housing_data.train.1$LotArea < 50000])

print("Correlation between sale price and living room area:")
cor(log(housing_data.train.1$SalePrice),
    housing_data.train.1$GrLivArea)

print("Correlation between sale price and year built:")
cor(log(housing_data.train.1$SalePrice),
    housing_data.train.1$YearBuilt)

print("Correlation between sale price and year remodeled:")
cor(log(housing_data.train.1$SalePrice),
    housing_data.train.1$YearRemodAdd)

print("Correlation between sale price and basement size:")
cor(log(housing_data.train.1$SalePrice),
    housing_data.train.1$TotalBsmtSF)
```

Based on these tests, the living room area, basement size, neighborhood, and seem to be one the highest correlated factors with sale price.

## Apply Linear Regression Model

First, we apply the `lm()` function to the living room area, which was shown to be a significant factor in the house sale price. This function will fit the linear model provided the data given.

```{r}
#apply lm to lot area 
housing.lm <- lm(log(housing_data.train.1$SalePrice) ~  housing_data.train.1$LotArea ,data=housing_data.train.1)

housing.lm
plot(housing.lm)
```

### Remove Outliers

In lecture, we learned to check the Residuals vs Fitted chart to see if the model needs adjusting. The red trend line should move along the dotted line in the chart. Since this is not the case, we can try removing outliers in the living room area and the sale price to enhance the model. We can also include the other significant fields to improve our model.

```{r}
#remove outliers in sale price
#housing_data.train.noout <- housing_data.train.noout[housing_data.train.noout$SalePrice < 400000,]

#remove outliers in living room area
housing_data.train.noout <- housing_data.train.1[housing_data.train.1$LotArea < 50000,]

housing.lm.3 <- lm(log(housing_data.train.noout$SalePrice)
                   ~ 
                     + log(housing_data.train.noout$GrLivArea)
                   + housing_data.train.noout$TotalBsmtSF
                   + housing_data.train.noout$Neighborhood
                   + log(housing_data.train.noout$LotArea),
               
                   data = housing_data.train.noout)
housing.lm.3
plot(housing.lm.3)
```

We can see that the red line in the Residuals vs Fitted chart follow a straight line.

Before we apply any predictions, let's view the `summary()` of this model:

```{r}
#view details of lm and predict sale price using the lm
summary(housing.lm.3)
```

### Predict

Now that we created a model, we can use the other half of the training data to predict the sale price with `predict.lm()`.

```{r}
# match dimensions
total_row <- nrow(housing_data.train.noout)
housing_predict <- predict.lm(housing.lm.3,housing_data.train.2[1:total_row,])

```

## Checking Our Prediction

### Correlation

Using correlation, we can see how accurate our model was with the actual sale price in the training data.

```{r}
#see what the correlation is between the prediction and actuals
actual_sale_price <- (housing_data.train.2$SalePrice[1:total_row] %/% 1000) * 1000
predict_sale_price <- (exp(housing_predict) %/% 1000) * 1000

cor(actual_sale_price,predict_sale_price)

```

We can also visualize the plot between the actual sale price and the predictions from our model.

```{r}
# visualize correlation
plot(actual_sale_price, predict_sale_price,
     xlab = "Actual Sale Price ($1000s)",
     ylab = "Predicted Sale Price ($1000s)")
```
